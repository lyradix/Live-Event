import React, { Component, ReactNode } from "react";
export interface InfiniteLoaderInterface {
    loadingIndicator?: null | (() => ReactNode) | ReactNode;
    loadingIndicatorPosition?: string;
    hasMore: boolean;
    loadMore: null | (() => void);
}
interface InfiniteLoaderState {
    scrollingContainer: HTMLElement | null;
    loadIndicatorContainer: HTMLDivElement | null;
    loading: boolean;
    prevItemsCount: number;
}
interface InfiniteLoaderProps extends InfiniteLoaderInterface {
    itemsCount: number;
}
declare class InfiniteLoader extends Component<InfiniteLoaderProps, InfiniteLoaderState> {
    state: InfiniteLoaderState;
    loaderContainerRef: React.RefObject<HTMLDivElement>;
    lastScrollTop: number;
    mounted: boolean;
    currentItemsCount: number;
    componentDidMount(): void;
    componentDidUpdate(prevProps: InfiniteLoaderProps, prevState: InfiniteLoaderState): void;
    componentWillUnmount(): void;
    reset(): void;
    getScrollingContainerChildrenCount: () => number;
    setupScrollingContainerEventsListener: (removeEvent?: boolean) => void;
    checkIfLoadingIsNeeded: () => void;
    render(): ReactNode;
}
export default InfiniteLoader;
//# sourceMappingURL=InfiniteLoader.d.ts.map