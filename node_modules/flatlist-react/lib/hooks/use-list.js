"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useList = void 0;
var react_1 = require("react");
var convertListToArray_1 = __importDefault(require("../___utils/convertListToArray"));
var filterList_1 = __importDefault(require("../___utils/filterList"));
var groupList_1 = __importDefault(require("../___utils/groupList"));
var isType_1 = require("../___utils/isType");
var limitList_1 = __importDefault(require("../___utils/limitList"));
var reverseList_1 = __importDefault(require("../___utils/reverseList"));
var searchList_1 = __importDefault(require("../___utils/searchList"));
var sortList_1 = __importDefault(require("../___utils/sortList"));
var flatListProps_1 = require("../flatListProps");
var useList = function (_a) {
    var list = _a.list, limit = _a.limit, reversed = _a.reversed, filterBy = _a.filterBy, group = _a.group, groupBy = _a.groupBy, groupOf = _a.groupOf, showGroupSeparatorAtTheBottom = _a.showGroupSeparatorAtTheBottom, groupReversed = _a.groupReversed, groupSeparatorAtTheBottom = _a.groupSeparatorAtTheBottom, groupSortedCaseInsensitive = _a.groupSortedCaseInsensitive, groupSortedDescending = _a.groupSortedDescending, groupSorted = _a.groupSorted, groupSortedBy = _a.groupSortedBy, sortBy = _a.sortBy, sortDesc = _a.sortDesc, sort = _a.sort, sortCaseInsensitive = _a.sortCaseInsensitive, sortGroupBy = _a.sortGroupBy, sortGroupDesc = _a.sortGroupDesc, sortGroupCaseInsensitive = _a.sortGroupCaseInsensitive, sortDescending = _a.sortDescending, search = _a.search, searchBy = _a.searchBy, searchOnEveryWord = _a.searchOnEveryWord, searchTerm = _a.searchTerm, searchCaseInsensitive = _a.searchCaseInsensitive, searchableMinCharactersCount = _a.searchableMinCharactersCount, searchMinCharactersCount = _a.searchMinCharactersCount;
    // convert list to array
    var renderList = (0, react_1.useMemo)(function () { return (0, convertListToArray_1.default)(list); }, [list]);
    // reverse list
    renderList = (0, react_1.useMemo)(function () {
        return typeof reversed === "boolean" && reversed
            ? (0, reverseList_1.default)(renderList)
            : renderList;
    }, [renderList, reversed]);
    // limit list
    renderList = (0, react_1.useMemo)(function () {
        if (!(0, isType_1.isNil)(limit)) {
            var _a = "".concat(limit).split(","), from = _a[0], to = _a[1];
            return (0, limitList_1.default)(renderList, from, to);
        }
        return renderList;
    }, [renderList, limit]);
    // filter list
    renderList = (0, react_1.useMemo)(function () { return (filterBy ? (0, filterList_1.default)(renderList, filterBy) : renderList); }, [renderList, filterBy]);
    // search list
    renderList = (0, react_1.useMemo)(function () {
        if (searchTerm || (search && search.term)) {
            var searchOptions = __assign(__assign({}, flatListProps_1.defaultProps.search), search);
            return (0, searchList_1.default)(renderList, {
                by: searchOptions.by || searchBy || "0",
                caseInsensitive: searchOptions.caseInsensitive || searchCaseInsensitive,
                everyWord: searchOptions.onEveryWord ||
                    searchOptions.everyWord || // deprecated
                    searchOnEveryWord,
                term: searchOptions.term || searchTerm,
                minCharactersCount: 
                // @ts-ignore
                searchOptions.searchableMinCharactersCount || // deprecated
                    searchOptions.minCharactersCount ||
                    searchMinCharactersCount ||
                    searchableMinCharactersCount || // deprecated
                    3,
            });
        }
        return renderList;
    }, [
        renderList,
        search,
        searchBy,
        searchOnEveryWord,
        searchTerm,
        searchCaseInsensitive,
        searchableMinCharactersCount,
        searchMinCharactersCount,
    ]);
    var sortOptions = (0, react_1.useMemo)(function () { return (__assign(__assign({}, flatListProps_1.defaultProps.sort), sort)); }, [renderList, sort]);
    // sort list
    renderList = (0, react_1.useMemo)(function () {
        if (sortOptions.by || sortBy || ((0, isType_1.isBoolean)(sort) && sort)) {
            return (0, sortList_1.default)(renderList, {
                caseInsensitive: sortOptions.caseInsensitive || sortCaseInsensitive || false,
                descending: sortOptions.descending || sortDescending || sortDesc || false,
                by: sortOptions.by || sortBy,
            });
        }
        return renderList;
    }, [
        renderList,
        sortOptions,
        sortBy,
        sortDesc,
        sort,
        sortCaseInsensitive,
        sortDescending,
    ]);
    // group list
    renderList = (0, react_1.useMemo)(function () {
        var groupOptions = __assign(__assign({}, flatListProps_1.defaultProps.group), group);
        if (groupOptions.by ||
            groupBy ||
            groupOf ||
            groupOptions.of ||
            groupOptions.limit) {
            var groupingOptions = {
                by: groupOptions.by || groupBy,
                limit: groupOptions.of || groupOf || groupOptions.limit,
                reversed: groupOptions.reversed || groupReversed,
            };
            var gList_1 = (0, groupList_1.default)(renderList, groupingOptions);
            return gList_1.groupLists.reduce(function (newGList, aGroup, idx) {
                if (groupSorted ||
                    // @ts-ignore
                    groupOptions.sorted ||
                    groupSortedBy ||
                    // @ts-ignore
                    groupOptions.sortedBy ||
                    groupOptions.sortBy ||
                    sortGroupBy ||
                    sortOptions.groupBy // deprecated
                ) {
                    aGroup = (0, sortList_1.default)(aGroup, {
                        caseInsensitive: groupSortedCaseInsensitive ||
                            // @ts-ignore
                            groupOptions.sortedCaseInsensitive ||
                            groupOptions.sortCaseInsensitive || // deprecated
                            sortGroupCaseInsensitive || // deprecated
                            sortOptions.groupCaseInsensitive,
                        descending: groupSortedDescending ||
                            // @ts-ignore
                            groupOptions.sortedDescending ||
                            groupOptions.sortDescending || // deprecated
                            sortGroupDesc,
                        by: groupSortedBy ||
                            // @ts-ignore
                            groupOptions.sortedBy ||
                            groupOptions.sortBy || // deprecated
                            sortGroupBy, // deprecated
                    });
                }
                var separator = ["___list-separator", gList_1.groupLabels[idx], aGroup];
                if (groupOptions.separatorAtTheBottom ||
                    groupSeparatorAtTheBottom ||
                    showGroupSeparatorAtTheBottom) {
                    return __spreadArray(__spreadArray(__spreadArray([], newGList, true), aGroup, true), [separator], false);
                }
                return __spreadArray(__spreadArray(__spreadArray([], newGList, true), [separator], false), aGroup, true);
            }, []);
        }
        return renderList;
    }, [
        renderList,
        group,
        groupReversed,
        groupSeparatorAtTheBottom,
        groupSortedCaseInsensitive,
        groupSortedDescending,
        groupSorted,
        groupSortedBy,
        sortGroupBy,
        sortGroupDesc,
        sortGroupCaseInsensitive,
    ]);
    return renderList;
};
exports.useList = useList;
