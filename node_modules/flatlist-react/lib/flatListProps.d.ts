import { ReactNode } from "react";
import { DisplayHandlerProps, DisplayInterface } from "./___subComponents/DisplayHandler";
import { InfiniteLoaderInterface } from "./___subComponents/InfiniteLoader";
import { renderFunc } from "./___subComponents/uiFunctions";
import { GroupOptionsInterface } from "./___utils/groupList";
import { SearchOptionsInterface } from "./___utils/searchList";
import { SortOptionsInterface } from "./___utils/sortList";
export type List<T> = Array<T> | Set<T> | Map<any, T> | {
    [key: string]: T;
};
export interface GroupInterface<ListItem> extends GroupOptionsInterface<ListItem> {
    limit?: number;
    of?: number;
    separator?: ReactNode | ((g: ListItem[], idx: number, label: string) => ReactNode | null) | null;
    separatorAtTheBottom?: boolean;
    sortBy?: SortOptionsInterface["by"];
    sortedBy?: SortOptionsInterface["by"];
    sortDescending?: boolean;
    sortedDescending?: boolean;
    sortCaseInsensitive?: boolean;
    sortedCaseInsensitive?: boolean;
}
export interface ScrollToTopInterface {
    button?: ReactNode | (() => JSX.Element);
    offset?: number;
    padding?: number;
    position?: "top" | "bottom" | "top right" | "top left" | "bottom left" | "bottom right";
}
export interface SortInterface<ListItem> extends SortOptionsInterface {
    groupBy?: GroupInterface<ListItem>["sortBy"];
    groupDescending?: GroupInterface<ListItem>["sortDescending"];
    groupCaseInsensitive?: GroupInterface<ListItem>["sortCaseInsensitive"];
}
export interface FlatListProps<ListItem> {
    list: List<ListItem>;
    renderItem: renderFunc<ListItem>;
    renderWhenEmpty?: ReactNode | (() => JSX.Element);
    renderOnScroll?: boolean;
    limit?: number | string;
    reversed?: boolean;
    wrapperHtmlTag?: string;
    sort?: boolean | SortInterface<ListItem>;
    sortBy?: SortInterface<ListItem>["by"];
    sortCaseInsensitive?: SortInterface<ListItem>["caseInsensitive"];
    sortDesc?: SortInterface<ListItem>["descending"];
    sortDescending?: SortInterface<ListItem>["descending"];
    sortGroupBy?: GroupInterface<ListItem>["sortBy"];
    sortGroupDesc?: GroupInterface<ListItem>["sortDescending"];
    sortGroupDescending?: GroupInterface<ListItem>["sortDescending"];
    sortGroupCaseInsensitive?: GroupInterface<ListItem>["sortCaseInsensitive"];
    group?: GroupInterface<ListItem>;
    showGroupSeparatorAtTheBottom?: GroupInterface<ListItem>["separatorAtTheBottom"];
    groupSeparatorAtTheBottom?: GroupInterface<ListItem>["separatorAtTheBottom"];
    groupReversed?: GroupInterface<ListItem>["reversed"];
    groupSeparator?: GroupInterface<ListItem>["separator"];
    groupBy?: GroupInterface<ListItem>["by"];
    groupOf?: GroupInterface<ListItem>["limit"];
    groupSorted?: boolean;
    groupSortedDescending?: GroupInterface<ListItem>["sortDescending"];
    groupSortedCaseInsensitive?: GroupInterface<ListItem>["sortCaseInsensitive"];
    display?: DisplayInterface;
    displayRow?: DisplayHandlerProps["displayRow"];
    rowGap?: DisplayHandlerProps["rowGap"];
    displayGrid?: DisplayHandlerProps["displayGrid"];
    gridGap?: DisplayHandlerProps["gridGap"];
    minColumnWidth?: DisplayHandlerProps["minColumnWidth"];
    filterBy?: string | ((item: ListItem, idx: number) => boolean);
    search?: SearchOptionsInterface<ListItem>;
    searchTerm?: SearchOptionsInterface<ListItem>["term"];
    searchBy?: SearchOptionsInterface<ListItem>["by"];
    searchOnEveryWord?: SearchOptionsInterface<ListItem>["everyWord"];
    searchCaseInsensitive?: SearchOptionsInterface<ListItem>["caseInsensitive"];
    searchableMinCharactersCount?: SearchOptionsInterface<ListItem>["minCharactersCount"];
    pagination?: InfiniteLoaderInterface;
    hasMoreItems?: InfiniteLoaderInterface["hasMore"];
    loadMoreItems?: null | InfiniteLoaderInterface["loadMore"];
    paginationLoadingIndicator?: InfiniteLoaderInterface["loadingIndicator"];
    paginationLoadingIndicatorPosition?: InfiniteLoaderInterface["loadingIndicatorPosition"];
    scrollToTop?: boolean | ScrollToTopInterface;
    scrollToTopButton?: ReactNode | (() => ReactNode);
    scrollToTopOffset?: number;
    scrollToTopPadding?: number;
    scrollToTopPosition?: string;
    [key: string]: any;
}
export declare const defaultProps: FlatListProps<any>;
//# sourceMappingURL=flatListProps.d.ts.map